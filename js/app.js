// Generated by CoffeeScript 1.9.0
var AbButton, AbButtonStateBlocked, AbButtonStateCalm, AbButtonStateFire, AbButtonStateWaiting, AbListener, BootstrapButton, BootstrapButtonStateBlocked, BootstrapButtonStateCalm, BootstrapButtonStateFire, BootstrapButtonStateWaiting, IButton, IButtonState, IListener,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  __hasProp = {}.hasOwnProperty;

IButton = (function() {
  function IButton(buttonState, json) {
    throw false;
  }

  IButton.prototype.getState = function() {
    throw false;
  };

  IButton.prototype.setState = function(buttonState) {
    throw false;
  };

  IButton.prototype.getListener = function() {
    throw false;
  };

  IButton.prototype.actionClick = function() {
    throw false;
  };

  IButton.prototype.actionMouseOver = function() {
    throw false;
  };

  IButton.prototype.actionMouseOut = function() {
    throw false;
  };

  return IButton;

})();

IButtonState = (function() {
  function IButtonState(button) {
    throw false;
  }

  IButtonState.prototype.actionClick = function(button) {
    throw false;
  };

  IButtonState.prototype.actionMouseOver = function(button) {
    throw false;
  };

  IButtonState.prototype.actionMouseOut = function(button) {
    throw false;
  };

  return IButtonState;

})();

IListener = (function() {
  function IListener(json) {
    throw false;
  }

  IListener.prototype.getTitle = function() {
    throw false;
  };

  IListener.prototype.setTitle = function(title) {
    throw false;
  };

  return IListener;

})();

AbButton = (function(_super) {
  __extends(AbButton, _super);

  AbButton.prototype.state = null;

  AbButton.prototype.listener = null;

  function AbButton(__stateName, __json) {
    this.__initListener(__json);
    this.__initState(__stateName);
    this.__initActions();
    return this;
  }

  AbButton.prototype.getState = function() {
    return this.state;
  };

  AbButton.prototype.setState = function(__state) {
    if (!(__state instanceof IButtonState)) {
      throw false;
    }
    this.state = __state;
    return null;
  };

  AbButton.prototype.getListener = function() {
    return this.listener;
  };

  AbButton.prototype.__initListener = function(__json) {
    if (__json == null) {
      throw false;
    }
    this.listener = this.createListener(__json);
    return null;
  };

  AbButton.prototype.__initState = function(stateName) {
    if (stateName != null) {
      if (typeof window[stateName] === 'function') {
        this.setState(new window[stateName](this));
      } else {
        throw false;
      }
    } else {
      this.setState(this.getStateCalm());
    }
    return null;
  };

  AbButton.prototype.__initActions = function() {
    this.listener.$owner.unbind('click').click((function(_this) {
      return function() {
        return _this.actionClick();
      };
    })(this));
    this.listener.$owner.unbind('mouseover').mouseover((function(_this) {
      return function() {
        return _this.actionMouseOver();
      };
    })(this));
    return this.listener.$owner.unbind('mouseout').mouseout((function(_this) {
      return function() {
        return _this.actionMouseOut();
      };
    })(this));
  };

  AbButton.prototype.actionClick = function() {
    this.state.actionClick(this);
    return null;
  };

  AbButton.prototype.actionMouseOver = function() {
    this.state.actionMouseOver(this);
    return null;
  };

  AbButton.prototype.actionMouseOut = function() {
    this.state.actionMouseOut(this);
    return null;
  };

  AbButton.prototype.setName = function(name) {
    return this.listener.$owner.text(name);
  };

  AbButton.prototype.getStateCalm = function() {
    return new AbButtonStateCalm(this);
  };

  AbButton.prototype.getStateFire = function() {
    return new AbButtonStateFire(this);
  };

  AbButton.prototype.getStateWaiting = function() {
    return new AbButtonStateWaiting(this);
  };

  AbButton.prototype.getStateBlocked = function() {
    return new AbButtonStateBlocked(this);
  };

  AbButton.prototype.createListener = function(__json) {
    return new AbListener(__json);
  };

  return AbButton;

})(IButton);

AbButtonStateBlocked = (function(_super) {
  __extends(AbButtonStateBlocked, _super);

  function AbButtonStateBlocked(button) {
    var listener;
    listener = button.getListener();
    listener.$owner.attr('state', 'blocked');
    listener.$owner.attr('disabled', '');
    button.setName(listener.getTitle('blocked'));
    this;
  }

  AbButtonStateBlocked.prototype.actionClick = function(button) {
    return this;
  };

  AbButtonStateBlocked.prototype.actionMouseOver = function(button) {
    return this;
  };

  AbButtonStateBlocked.prototype.actionMouseOut = function(button) {
    return this;
  };

  return AbButtonStateBlocked;

})(IButtonState);

AbButtonStateCalm = (function(_super) {
  __extends(AbButtonStateCalm, _super);

  function AbButtonStateCalm(button) {
    var listener;
    listener = button.getListener();
    listener.$owner.attr('state', 'calm');
    listener.$owner.removeAttr('disabled');
    button.setName(listener.getTitle('calm'));
    this;
  }

  AbButtonStateCalm.prototype.actionClick = function(button) {
    var action, listener;
    listener = button.getListener();
    action = listener.getAction('actionClick');
    action(button);
    button.setState(button.getStateWaiting());
    return this;
  };

  AbButtonStateCalm.prototype.actionMouseOver = function(button) {
    button.setState(button.getStateFire());
    return this;
  };

  AbButtonStateCalm.prototype.actionMouseOut = function(button) {
    var action, listener;
    listener = button.getListener();
    action = listener.getAction('actionMouseOut');
    action(button);
    return this;
  };

  return AbButtonStateCalm;

})(IButtonState);

AbButtonStateFire = (function(_super) {
  __extends(AbButtonStateFire, _super);

  function AbButtonStateFire(button) {
    var listener;
    listener = button.getListener();
    listener.$owner.attr('state', 'fire');
    button.setName(listener.getTitle('fire'));
    this;
  }

  AbButtonStateFire.prototype.actionClick = function(button) {
    var action, listener;
    listener = button.getListener();
    action = listener.getAction('actionClick');
    action(button);
    button.setState(button.getStateWaiting());
    return this;
  };

  AbButtonStateFire.prototype.actionMouseOver = function(button) {
    var action, listener;
    listener = button.getListener();
    action = listener.getAction('actionMouseOver');
    action(button);
    return this;
  };

  AbButtonStateFire.prototype.actionMouseOut = function(button) {
    var action, listener;
    listener = button.getListener();
    action = listener.getAction('actionMouseOut');
    action(button);
    button.setState(button.getStateCalm());
    return this;
  };

  return AbButtonStateFire;

})(IButtonState);

AbButtonStateWaiting = (function(_super) {
  __extends(AbButtonStateWaiting, _super);

  function AbButtonStateWaiting(button) {
    var listener;
    listener = button.getListener();
    listener.$owner.attr('state', 'waiting');
    button.setName(listener.getTitle('waiting'));
    this;
  }

  AbButtonStateWaiting.prototype.actionClick = function(button) {
    return this;
  };

  AbButtonStateWaiting.prototype.actionMouseOver = function(button) {
    return this;
  };

  AbButtonStateWaiting.prototype.actionMouseOut = function(button) {
    return this;
  };

  return AbButtonStateWaiting;

})(IButtonState);

AbListener = (function(_super) {
  __extends(AbListener, _super);

  AbListener.prototype.json = null;

  AbListener.prototype.$owner = null;

  function AbListener(__json) {
    this.__validation(__json);
    this.json = __json;
    return this;
  }

  AbListener.prototype.__validation = function(__json) {
    if (__json == null) {
      throw false;
    }
    if (__json.title == null) {
      throw false;
    }
    if (__json.defaultState == null) {
      throw false;
    }
    if (__json.owner == null) {
      throw false;
    }
    if (__json.owner != null) {
      if (!($(__json.owner).length > 0)) {
        throw false;
      }
      return this.$owner = $(__json.owner);
    }
  };

  AbListener.prototype.getTitle = function(state) {
    var title;
    if (this.json.title != null) {
      title = this.json.title;
    }
    if ((this.json.titles != null) && (state != null)) {
      if (!(state in this.json.titles)) {
        throw false;
      }
      title = this.json.titles[state];
    }
    return title;
  };

  AbListener.prototype.setTitle = function(title) {
    if (title == null) {
      throw false;
    }
    if (!(title.length > 0)) {
      throw false;
    }
    if (typeof title !== 'string') {
      throw false;
    }
    return this.json.title = title;
  };

  AbListener.prototype.getAction = function(actionName) {
    if (this.json.listener[actionName] == null) {
      throw false;
    }
    return this.json.listener[actionName];
  };

  AbListener.prototype.getOwner = function() {
    return this.json.owner;
  };

  AbListener.prototype.$owner = function() {
    return this.$owner;
  };

  return AbListener;

})(IListener);

BootstrapButton = (function(_super) {
  __extends(BootstrapButton, _super);

  function BootstrapButton() {
    return BootstrapButton.__super__.constructor.apply(this, arguments);
  }

  BootstrapButton.prototype.state = null;

  BootstrapButton.prototype.listener = null;

  BootstrapButton.prototype.getStateCalm = function() {
    return new BootstrapButtonStateCalm(this);
  };

  BootstrapButton.prototype.getStateFire = function() {
    return new BootstrapButtonStateFire(this);
  };

  BootstrapButton.prototype.getStateWaiting = function() {
    return new BootstrapButtonStateWaiting(this);
  };

  BootstrapButton.prototype.getStateBlocked = function() {
    return new BootstrapButtonStateBlocked(this);
  };

  return BootstrapButton;

})(AbButton);

BootstrapButtonStateBlocked = (function(_super) {
  __extends(BootstrapButtonStateBlocked, _super);

  function BootstrapButtonStateBlocked(button) {
    var listener;
    listener = button.getListener();
    listener.$owner.attr('state', 'blocked');
    listener.$owner.attr('disabled', '');
    listener.$owner.addClass('disabled');
    listener.$owner.addClass('btn-success');
    listener.$owner.removeClass('btn-warning');
    listener.$owner.removeClass('btn-danger');
    button.setName(listener.getTitle('blocked'));
  }

  return BootstrapButtonStateBlocked;

})(AbButtonStateBlocked);

BootstrapButtonStateCalm = (function(_super) {
  __extends(BootstrapButtonStateCalm, _super);

  function BootstrapButtonStateCalm(button) {
    var listener;
    listener = button.getListener();
    listener.$owner.attr('state', 'calm');
    listener.$owner.removeAttr('disabled');
    listener.$owner.removeClass('disabled');
    listener.$owner.removeClass('btn-warning');
    listener.$owner.addClass('btn-primary');
    listener.$owner.removeClass('btn-danger');
    button.setName(listener.getTitle('calm'));
    this;
  }

  BootstrapButtonStateCalm.prototype.actionClick = function(button) {
    var action, listener;
    listener = button.getListener();
    action = listener.getAction('actionClick');
    action(button);
    button.setState(button.getStateWaiting());
    return this;
  };

  BootstrapButtonStateCalm.prototype.actionMouseOver = function(button) {
    return BootstrapButtonStateCalm.__super__.actionMouseOver.apply(this, arguments);
  };

  BootstrapButtonStateCalm.prototype.actionMouseOut = function(button) {
    return BootstrapButtonStateCalm.__super__.actionMouseOut.apply(this, arguments);
  };

  return BootstrapButtonStateCalm;

})(AbButtonStateCalm);

BootstrapButtonStateFire = (function(_super) {
  __extends(BootstrapButtonStateFire, _super);

  function BootstrapButtonStateFire(button) {
    var listener;
    listener = button.getListener();
    listener.$owner.attr('state', 'fire');
    listener.$owner.addClass('btn-warning');
    listener.$owner.removeClass('btn-primary');
    button.setName(listener.getTitle('fire'));
    this;
  }

  BootstrapButtonStateFire.prototype.actionClick = function(button) {
    return BootstrapButtonStateFire.__super__.actionClick.apply(this, arguments);
  };

  BootstrapButtonStateFire.prototype.actionMouseOver = function(button) {
    return BootstrapButtonStateFire.__super__.actionMouseOver.apply(this, arguments);
  };

  BootstrapButtonStateFire.prototype.actionMouseOut = function(button) {
    return BootstrapButtonStateFire.__super__.actionMouseOut.apply(this, arguments);
  };

  return BootstrapButtonStateFire;

})(AbButtonStateFire);

BootstrapButtonStateWaiting = (function(_super) {
  __extends(BootstrapButtonStateWaiting, _super);

  function BootstrapButtonStateWaiting(button) {
    var listener;
    listener = button.getListener();
    listener.$owner.attr('state', 'waiting');
    listener.$owner.removeClass('btn-primary');
    listener.$owner.addClass('btn-danger');
    listener.$owner.addClass('disabled');
    button.setName(listener.getTitle('waiting'));
    this;
  }

  return BootstrapButtonStateWaiting;

})(AbButtonStateWaiting);


$.fn.bs = function(options) {
  var btn;
  options.owner = this.selector;
  btn = new BootstrapButton(null, options);
  return this;
};